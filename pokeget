#!/usr/bin/env bash

# shellcheck source=/dev/null

# Heya! If you want to improve the code, fix bugs, or add new features make a PR on the github repo! https://github.com/talwat/pokeget

# Color variables

GREEN="\x1B[32m"
YELLOW="\x1B[33m"
#ORANGE="\e[33m"
CYAN="\x1B[36m"
RED="\x1B[31m"
BOLD="\x1B[1m"
RESET="\x1B[0m"

# Configurable

small=false      # The default size value.
shiny=false      # The default shiny value.
back=false       # The default back value.
debug=false      # The default debug value.
variant=""       # The default variant value.
randomGens=()    # The default randomGens value.
getVanilla=false # The default getfromPokeAPI value.
partner=false    # The default partner value.

# Make config file.

if [ ! -d "$HOME/.config/pokeget" ]; then
  mkdir "$HOME/.config/pokeget"
fi
if [ ! -f "$HOME/.config/pokeget/pokeget.conf" ]; then
  printf "# Determines wether the sprite is the small (pc/box) sprite. Doesn't work with 'shiny' and 'back'.
small=false

# Determines wether the sprite will use the shiny variant.
shiny=false

# Determines wether the sprite will be facing backwards.
back=false

# The variant of the sprite. Determines megas, pokemon specific things like arceus, alolan forms, etc...
variant=\"\"

# EXPERIMENTAL
# Use vanilla sprites, not pokemon reborn sprites. This will make shinies normal and small sprites look better, but it will remove back sprites and variants.
getVanilla=false
" >"$HOME/.config/pokeget/pokeget.conf"
fi

# Import config file

source "$HOME/.config/pokeget/pokeget.conf"

# Non-configurable variables

variantAsk=false
randomAsk=false
rawId=0

# Get Flags & Input

for var in "$@"; do
  case $var in
  -small)
    small=true
    ;;
  -big)
    small=false
    ;;
  -shiny)
    shiny=true
    ;;
  -notshiny)
    shiny=false
    ;;
  -back)
    back=true
    ;;
  -front)
    back=false
    ;;
  -variant)
    variantAsk=true
    ;;
  -debug)
    debug=true
    ;;
  -random)
    randomAsk=true
    ;;
  -partner)
    partner=true
    ;;
  -*)
    echo -e "${RED}[!]${RESET} Invalid flag"
    exit
    ;;
  *)

    # Check if the variant flag has been called to set the variant value

    if [ $variantAsk == true ]; then
      variant="$var"
      variantAsk=false

    # Check if the random flag has been called to set the random value

    elif [ $randomAsk == true ]; then

      # Splits $var with ',' as the seperator and assigns it to randomGens
      IFS=',' read -ra randomGens <<<"$var"

    # If no flags which require another value have been called, set the raw ID
    else
      rawId=$var
    fi
    ;;
  esac
done

# Do stuff based on input

if [ "$1" == "" ]; then
  echo -e "${CYAN}[!]${RESET} Use ${BOLD}pokeget help${RESET} to see usage."
  exit 0

elif [ "$1" == "version" ]; then
  echo -e "${CYAN}[!]${RESET} pokeget 1.1.1 ${BASH_SOURCE[0]}"
  exit 0

# Help Command

elif [ "$1" == "help" ]; then
  echo -e "${BOLD}pokeget${RESET} [flags] <pokemon ID/pokemon name>"
  echo -e "${BOLD}PS${RESET}: This program requires internet to work."
  echo ""
  echo -e "${BOLD}${CYAN}Commands${RESET}"
  echo -e "  ${BOLD}help:${RESET}           Displays this menu."
  echo -e "  ${BOLD}update:${RESET}         Updates pokeget."
  echo -e "  ${BOLD}uninstall:${RESET}      Uninstalls pokeget."
  echo -e "${BOLD}${CYAN}Flags${RESET}"
  echo -e "  ${BOLD}-small:${RESET}         Makes the pokemon a smaller sprite. in the pokemon games, this would be the sprite found when browsing the pokemon storage system."
  echo -e "  ${BOLD}-big:${RESET}           Makes the pokemon a big sprite. in the pokemon games, this would be the sprite found of your opponents pokemon while battling."
  echo -e "  ${BOLD}-back:${RESET}          Makes the pokemon the back sprite. in the pokemon games, this would be the sprite found of your pokemon while battling. Only works on big sprites."
  echo -e "  ${BOLD}-front:${RESET}         Makes the pokemon the front sprite. in the pokemon games, this would be the sprite found of your opponents pokemon while battling. Only works on big sprites."
  echo -e "  ${BOLD}-shiny:${RESET}         Dictates wether the pokemon is shiny, only works on big sprites. (NOTE: the shiny colors are from pokemon reborn, so a lot of them are completely different than the normal shiny colors.)"
  echo -e "  ${BOLD}-notshiny:${RESET}      Makes the pokemon not shiny."
  echo -e "  ${BOLD}-partner:${RESET}       Makes two of the same pokemon instead of just one."
  echo -e "  ${BOLD}-variant <num>:${RESET} This flag dictates the following things: wether the pokemon is mega, alolan form, pokemon specific things such as arceus, and a few other things."
  echo -e "  ${BOLD}-random <gens>:${RESET} This flag makes a random pokemon. You can specify what generations the random pokemon will be in, or if you put '0' it will pick a random pokemon from any generation. Random generations should be separated by ',' with no spaces."
  echo -e "${BOLD}${CYAN}Credits${RESET}"
  echo "  Pokeget gets its sprites from Pokemon Reborn, which is why there may be some pokemon that look different. "
  echo -e "  If you do not like this set ${BOLD}getVanilla${RESET} to true in your config file which will make pokeget use sprites from PokeAPI which have the same look as normal sprites."
  echo "  All sprites and art are originally made by gamefreak, so huge props to them."
  echo "  Code written by Talwat in bash."
  exit 0

elif [ "$1" == "update" ]; then
  function user_update {
    curl -s https://raw.githubusercontent.com/talwat/pokeget/main/pokeget --output ~/.local/bin/pokeget
    chmod +x ~/.local/bin/pokeget
  }
  function sys_update {
    curl -s https://raw.githubusercontent.com/talwat/pokeget/main/pokeget --output usr/bin/pokeget
    chmod +x usr/bin/pokeget
  }
  if [ "$USER" != "root" ]; then
    if [ -f "/usr/bin/pokeget" ] && [ ! -f "$HOME/.local/bin/pokeget" ]; then
      curl -s https://raw.githubusercontent.com/talwat/pokeget/main/pokeget --output /tmp/pokeget
      chmod +x /tmp/pokeget
      sudo mv /tmp/pokeget /usr/bin/
    else
      user_update
    fi
  else
    sys_update
  fi
  echo -e "${GREEN}[!]${RESET} Updated pokeget."
  exit 0

elif
  [ "$1" == "uninstall" ]
then
  bash <(curl -s https://raw.githubusercontent.com/talwat/pokeget/main/scripts/uninstall.sh)

else

  # Generate random number

  if [ "${randomGens[0]}" != "" ]; then

    # Generate random number to pick the generation from the input

    randomGenNum=$(shuf -i 0-${#randomGens[@]} -n 1)

    # Subtract 1 from the random number generated to pick the generation

    randomGenNum=$((randomGenNum - 1))

    # Use the random number to pick a generation

    finalRandomGen=${randomGens[$randomGenNum]}

    # Debug info

    if [ $debug == true ]; then
      echo -e "${YELLOW}[!]${RESET} randomGenNum: $randomGenNum"
      echo -e "${YELLOW}[!]${RESET} finalRandomGen: $finalRandomGen"
      echo -e "${YELLOW}[!]${RESET} randomGens: ${randomGens[0]}"
    fi

    # Random values

    randomGenValues=("0-807" "0-151" "152-251" "252-386" "387-493" "494-649" "650-721" "722-809" "810-898")

    # Get a random pokemon from the random generation

    rawId=$(shuf -i "${randomGenValues[$finalRandomGen]}" -n 1)
  fi

  # Check if the input is a national dex ID or a pokemon name

  if [[ $rawId =~ ^[0-9]+$ ]]; then
    isPkmnName=false
  else
    isPkmnName=true
  fi

  # Parse the ID/Name

  if [ $isPkmnName == false ]; then
    id=$rawId
    length=${#id}

    # Loop until the pokemon ID's length is three. This makes '3' '003', '25' '025', etc...

    while ((length < 3)); do
      id=0$id
      length=${#id}
    done
  else
    id=$(echo "$rawId" | tr '[:upper:]' '[:lower:]')
  fi

  # Disable certain options if getVanilla is true.

  if [ $getVanilla == true ]; then
    back=false
    variant=""
  fi

  # Options that work with any config

  if [ $shiny == true ]; then
    id="${id}s"
  fi

  # Apply values from flags & config file.

  if [ $small == true ]; then
    size="small"

  # Apply other flags if the small option is false. This is because small sprites don't have back sprites and shiny sprites
  else
    size="big"
    if [ $back == true ]; then
      id="${id}b"
    fi
  fi
  if [ "$variant" != "" ]; then
    id="${id}_${variant}"
  fi

  folderName="pokemon"

  # Append to folder name if getting from the vanilla sprites

  if [ $getVanilla == true ]; then
    folderName="${folderName}_vanilla"
  fi

  # Append to folder name based on wether input was a pokemon name or ID

  if [ $isPkmnName == true ]; then
    folderName="${folderName}_named"
  fi

  # Put together the final URL

  url="https://raw.githubusercontent.com/talwat/pokeget/main/${folderName}/${size}/${id}.txt"

  rawId=$1
  # Get final sprite using cURL

  rSolo=$(curl -s -L "${url}")

  # Put another sprite next to the first one if partner is true

  if [ $partner == true ]; then
    r=$(paste <(echo "${rSolo}") <(echo "${rSolo}"))
  else
    r=$rSolo
  fi

  # Debug info

  if [ $debug == true ]; then
    echo -e "${YELLOW}[!]${RESET} URL: $url"
  fi

  # Print output or 404 message

  if [[ $r == *"404"* ]]; then
    echo -e "${RED}[!]${RESET} Pokemon could not be found (404 Error)$RESET"
    exit 1
  else
    echo -e "$r$RESET"
    exit 0
  fi
fi
